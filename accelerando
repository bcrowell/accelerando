#!/usr/bin/perl
#----------------------------------------------------------------
# Copyright (c) 2005 Benjamin Crowell, all rights reserved.
#
# This software is available under version 2 of the GPL license.
#
#----------------------------------------------------------------

#----------------------------------------------------------------
# Version number
#----------------------------------------------------------------
our $version = "1.1"; 

#----------------------------------------------------------------
# Long documentation
#
# The man page is generated from this, using pod2man.
#----------------------------------------------------------------

=head1 NAME

Accelerando - an accelerating musical metronome

=head1 SYNOPSIS

=over 8

=item accelerando &

Runs the GUI.

=item accelerando -t

Prints usage information for the command-line interface.

=item accelerando -t argument-list

Runs the command-line interface. The argument list can be truncated, in which case
the missing parameters take their default values. A default value can also be specified
with a dot.

=item accelerando -v

Prints the version number and exits.

=back

=head1 ARGUMENTS

=over 8

=item initial tempo

Initial tempo, in beats per minute.

=item wait

Seconds to delay before starting.

=item timesig

Beats per bar

=item bars

Number of bars before increasing the tempo

=item add

Amount to add to the tempo after the first time. If a maximum tempo has been set, the
tempo will not keep increasing at this rate forever, but rather will asymptotically
approach the maximum tempo.

=item max

Maximum tempo.

=item voice

If this parameter is set to 1, a synthesized voice will announce each tempo.

=item interpolate

If set to 1, the tempo will go up smoothly rather than discontinuously at the end of each repetition. Default: 1.

=back

=head1 DESCRIPTION

Accelerando is a musical metronome that can speed up, allowing you to practice your music at progressively faster tempos. For example, you could set it to play 60 beats per minute for 4 bars, then automatically speed up by 10 beats per minute, and so on.

=head1 OTHER INFORMATION

Accelerando's web page is at

        http://www.lightandmatter.com/accelerando/   ,

where you can always find the latest version of the software.

=head1 AUTHOR

Accelerando was written by Ben Crowell, http://www.lightandmatter.com/personal/.

=head1 COPYRIGHT AND LICENSE

B<Copyright (C)> 2008 by Benjamin Crowell.

B<Accelerando> is free software; you can redistribute it and/or modify it
under the terms of the GPL, version 2.

=cut

#==========================================================================

use strict;
use FindBin;
use lib $FindBin::RealBin;
   # RealBin follows symbolic links, as opposed to Bin, which doesn't.
use POSIX;
use Time::HiRes;
use Accelerando::Words;
use utf8;
use vars qw($language_handle);
$language_handle = Accelerando::Words->get_handle() || die "Unable to find an appropriate language for your locale, as given, e.g., in your \$LANG environment variable.";
      #... should automatically sense user's locale based on, e.g., $LANG

sub w (@) { $language_handle->maketext(@_) }
$Carp::Verbose = 1; # in case maketext fails

$| = 1; # autoflush stdout

my ($gui,$args,$print_version) = parse_command_line(@ARGV);

if ($print_version) {print $version,"\n"; exit}

our $semaphore_file = '';
our $return_info_file = '';
our $cleanup_file = '.accelerando_clean_up'; # needed in case the UI process dies while leaving the helper running

sub catch_signals {
  $SIG{TERM} = sub{panic('term')};
  $SIG{INT}  = sub{panic('int')};
  $SIG{QUIT} = sub{panic('quit')};
  $SIG{TSTP} = sub{panic('tstp')};
  $SIG{HUP}  = sub{panic('hup')};
  $SIG{ABRT} = sub{panic('abrt')};
  $SIG{SEGV} = sub{panic('segv')};
      # ... segmentation violation could indicate data are corrupted, in which
      # case you wouldn't want to save to disk; however, the data is all
      # pure Perl, and when segvs occur, they're presumably occurring in
      # Perl/Tk, which means saving the data is the right thing to do.
}

sub panic {
  my $signal = shift;
  #print "Caught signal $signal.\n";
  shut_the_hell_up();
  exit();
}

END {
  shut_the_hell_up();
}

sub shut_the_hell_up {
  unlink $semaphore_file if $semaphore_file;
  $semaphore_file = '';
  if (-e $cleanup_file) {
    open(FILE,"<$cleanup_file");
    $semaphore_file = <FILE>;
    close FILE;
    chomp $semaphore_file;
    unlink $semaphore_file;
    $semaphore_file = '';
    unlink $cleanup_file;
  }
}

my @inputs = (
  {'what'=>'initial','default'=>60,'name'=>w('Initial tempo')},
  {'what'=>'wait','default'=>10,'name'=>w('Seconds to delay before starting')},
  {'what'=>'timesig','default'=>4,'name'=>w('Beats per bar')},
  {'what'=>'bars','default'=>4,'name'=>w('Number of bars before increasing the tempo')},
  {'what'=>'add','default'=>0,'name'=>w('Amount to add to the tempo after the first time')},
  {'what'=>'max','default'=>($gui ? '' : '999'),'name'=>w('Maximum tempo')},
  {'what'=>'voice','default'=>$gui,'name'=>w('Announce tempos'),'type'=>'Checkbutton'},
  {'what'=>'interpolate','default'=>1,'name'=>w('Increase tempo smoothly during each repetition'),'type'=>'Checkbutton'},
);
my @descriptions = ();
foreach my $i(@inputs) {push @descriptions,$i->{'what'}}
my %input_var = ();

catch_signals();
shut_the_hell_up(); # in case a previous UI process died while leavign the helper orphaned

if ($gui) {
  unless (eval("require Gtk2")) {die "Gtk2-Perl does not seem to be installed. To use the terminal-based interface, do accelerando -t."}
  eval(<<GTK_STUFF
    use Glib qw/TRUE FALSE/;
    use Gtk2 '-init'; 
GTK_STUFF
  );
  gui();
}
else {
  my @args = @$args;
  if (@args <1) {die usage()}
  my $k = 0;
  foreach my $i(@inputs) {
    my $what = $i->{'what'};
    if (exists $args[$k] && $args[$k] ne '.') {
      $input_var{$what} = $args[$k];
    }
    else {
      $input_var{$what} = $i->{default};
    }
    ++$k;
  }
  print '                            ',join(' ',@descriptions),"\n";
  ($return_info_file,$semaphore_file) = set_up_for_helper(\@inputs,\%input_var);
  if ($input_var{wait}>0) {
    print "Delaying $input_var{wait} seconds before starting.                                            ";
    for (my $i=$input_var{wait}; $i>0; $i--) {
      print "$i ";
      sleep(1);
    }
    print "\n";
  }
  my $cmd = "accelerando_helper $semaphore_file $return_info_file &";
  system($cmd)==0 or die "shell command $cmd failed, $?";
  print "Press enter to stop.\n";
  <STDIN>;
  shut_the_hell_up();
}

sub parse_command_line {
  my @ARGV = @_;
  my $gui = 1;
  my $print_version = 0;
  my @args;
  foreach my $arg(@ARGV) {
    if ($arg =~ m/\-([a-z])/) {
      my $option = $1;
      if ($option eq "t") {$gui=0}
      if ($option eq "v") {$print_version=1}
    }
    else {
      push @args,$arg;
    }
  }
  return ($gui,\@args,$print_version);
}

sub usage {
  my $r = <<STUFF;
Full documentation is available on the program's web page, http://www.lightandmatter.com/accelerando/, and via its man page.
Inputs:
STUFF
  $r = $r . describe_args();
  $r = $r . "usage:\n             accelerando -t ".join(' ',@descriptions)."\n";
  return $r;
}

sub describe_args {
  my $r = '';
  foreach my $i(@inputs) {
    $r = $r . "  ".(sprintf "%10s",$i->{what})." = ".$i->{name}." (default=".$i->{default}.")\n";
  }
  return $r;
}

#---------------------------------------------------------------------------------------------
#  GUI
#---------------------------------------------------------------------------------------------

our $mw; # main window

sub gui {


my $playing = 0;
my $playing_message;

my $start_sub = sub{
  if (!$playing) {
    ($return_info_file,$semaphore_file) = set_up_for_helper(\@inputs,\%input_var);
    # Tell them we're delaying, and then do it:
    my $wait = $input_var{'wait'};
    my $playing_message = Gtk2::Window->new('toplevel');
    my $when_to_start = clock()+$wait;
    my $delay_left_text = '';

    my $playing_table =  Gtk2::Table ->new(4,1,0); # rows, columns, homogeneous

    my $delay_left_label =  Gtk2::Label->new();
    my $update_delay_left_text = sub {
      my $t = int($when_to_start-clock()+.99);
      my $new;
      if ($t>=1) {
        $new = w('Starting in [_1] seconds...',$t);
      }
      else {
        $new = '';
      }
      $delay_left_text = $new if $new ne $delay_left_text;
      $delay_left_label->set_markup(qq(<span font="48">$delay_left_text</span>));
    };
    &$update_delay_left_text;

    my $display_current_tempo = $input_var{'initial'};
    my $current_tempo = Gtk2::Label->new();
    my $update_current_tempo_text = sub {
      $current_tempo->set_markup(qq(<span font="300">$display_current_tempo</span>));
    };
    &$update_current_tempo_text;
    my ($delay_left_source_id,$prevent_x_screensaver_source_id,$display_current_tempo_source_id);
    my $kill_timers = sub {
      foreach my $id($delay_left_source_id,$prevent_x_screensaver_source_id,$display_current_tempo_source_id) {
        Glib::Source->remove($id);
      }
    };
    my $when_done_playing = sub {
      if ($playing) {
        unlink $semaphore_file if $semaphore_file;
        $semaphore_file = '';
        $playing = 0;
      }
      $playing_message->destroy if $playing_message;
      &$kill_timers;
    };
    my $skip_delay;
    $playing_message->signal_connect(destroy=>sub{&$when_done_playing});
    my ($xoffset,$yoffset) = (0,0);
    #$playing_message->geometry(offset_location($xoffset,$yoffset));

    my $stop_button = Gtk2::Button->new (w('Stop'));
    $stop_button->signal_connect (clicked => $when_done_playing);

    my $skip_delay_button = Gtk2::Button->new (w('Skip Delay'));
    $skip_delay_button->signal_connect (clicked => sub{$when_to_start=clock()});

    my $row = 0;
    $playing_table->attach_defaults($delay_left_label,  0,1,$row,$row+1); ++$row;
    $playing_table->attach_defaults($current_tempo,     0,1,$row,$row+1); ++$row;
    $playing_table->attach_defaults($stop_button,       0,1,$row,$row+1); ++$row;
    $playing_table->attach_defaults($skip_delay_button, 0,1,$row,$row+1); ++$row;
    $playing_message->add($playing_table);
    $playing_message->show_all();

    $delay_left_source_id = Glib::Timeout::add( # deprecated, but binding for add_full() doesn't seem to exist in gtk-perl
      # priority, milliseconds, callback:
      0,
      100,
      sub{
        if (!$playing) {
          &$update_delay_left_text;
          if (clock()>=$when_to_start) {
            $playing = 1;
            my $cmd = "accelerando_helper $semaphore_file $return_info_file &";
            #print "cmd=$cmd=\n";
            system($cmd)==0 or error_message("shell command $cmd failed, $?");
            #$skip_delay->configure(-state=>'disabled');
          }
          return 1;
        }
        return 0; # stop getting events
      }
    );

  $prevent_x_screensaver_source_id = Glib::Timeout::add( # deprecated, but binding for add_full() doesn't seem to exist in gtk-perl
    0,
    10000,
    sub{prevent_x_screensaver(); return 1}
  );

  $display_current_tempo_source_id = Glib::Timeout::add( # deprecated, but binding for add_full() doesn't seem to exist in gtk-perl
    0,
    500,
    sub {
      open(F,"<$return_info_file") or return 1;
      my $tempo = <F>;
      close F;
      chomp $tempo;
      $display_current_tempo=int($tempo+.5) if int($tempo)!=int($display_current_tempo) and $tempo;
      &$update_current_tempo_text;
      return 1;
    }
  );

  } # end if not playing

};

my $window = Gtk2::Window->new('toplevel');
$window->signal_connect('delete_event' => sub { Gtk2->main_quit; });
$window->set_border_width(5);
$window->set_position('center_always');

#my $menu_bar = undef;
#$menu_bar = $mw->Frame(-relief=>'raised',-borderwidth=>'2');
#my @items = ();
#push @items,['command'=>'Quit',-command=>sub{exit}];
#my $file_menu = $menu_bar->Menubutton(-text=>'File',-menuitems=>\@items,-tearoff=>0)->pack(-side=>'left');
#$menu_bar->pack(-side=>'top',-anchor=>'w',-fill=>'x');

my $n_inputs = @inputs;
my $control_frame = Gtk2::VBox->new(0,5); # homogeneous, spacing; surrounds both the inputs and the start button
my $input_table =  Gtk2::Table ->new($n_inputs,2,1); # rows, columns, homogeneous

my %input_widget = ();
my $k=0;
foreach my $i(@inputs) {
  my $what = $i->{'what'};
  my $default = $i->{'default'};
  my $name = $i->{'name'};
  my $type = 'Entry';
  if (exists $i->{'type'}) {$type = $i->{'type'}}
  my $label =  Gtk2::Label->new($name);
  $input_var{$what} = $default;
  if ($type eq 'Entry') {
    $input_widget{$what} = Gtk2::Entry->new();
    $input_widget{$what}->set_text($default);
    $input_widget{$what}->signal_connect (changed => sub {$input_var{$what} = $input_widget{$what}->get_text()});
  }
  if ($type eq 'Checkbutton') {
    $input_widget{$what} = Gtk2::CheckButton->new();
    $input_widget{$what}->set_active($default);
    $input_widget{$what}->signal_connect (toggled => sub {$input_var{$what} = $input_widget{$what}->get_active()});
  }
  $input_table->attach_defaults($label,               0,1,$k,$k+1); # widget, left, right, top, bottom
  $input_table->attach($input_widget{$what}, 1,2,$k,$k+1,[],[],0,1); # widget, left, right, top, bottom, xoptions, yoptions, xpadding, ypadding
  $label->set_alignment(1,0); # right, top
  ++$k;
}

my $start_button = Gtk2::Button->new (w('Start'));
$start_button->signal_connect (clicked => $start_sub);

$control_frame->pack_start($input_table,1,1,5); # box, child, expand, fill, padding
$control_frame->pack_start($start_button,0,0,5);

$window->add($control_frame);

$window->show_all;

Gtk2->main();

}

sub empty_toplevel_window {
  my $title = shift;
  my $it = $mw->Toplevel();
  $it->transient($mw);
  $it->title($title);
  return $it;
}

sub offset_location {
  my $xoffset = shift; my $yoffset = shift;
  my ($x,$y) = preferred_location_coords();
  return coords_to_geometry_string($x+$xoffset,$y+$yoffset);
}

sub coords_to_geometry_string {
  my $x = shift; my $y = shift;
  if (! ($y =~ m/^[\+\-]/)) {$y='+'.$y}
  if (! ($x =~ m/^[\+\-]/)) {$x='+'.$x}
  return $x.$y;
}

sub preferred_location_coords {
  $mw->geometry() =~ m/^=?(\d+)x(\d+)([+-]\d+)([+-]\d+)$/;
  return ($3,$4);
}

sub error_message {
  my $message = shift;
  my $box = empty_toplevel_window("error");
  $box->Label(-text=>$message,-justify=>'left')->pack();
  $box->Button(-text=>"OK",-command=>sub{$box->destroy()})->pack();
}

sub empty_toplevel_window {
  my $title = shift;
  my $it = $mw->Toplevel();
  $it->transient($mw);
  $it->title($title);
  return $it;
}

#---------------------------------------------------------------------------------------------
#  UI-independent helper routines
#---------------------------------------------------------------------------------------------

sub prevent_x_screensaver {
  system("xscreensaver-command -deactivate  >&- 2>&- &");
    #... makes xscreensaver pretend there has just been some mouse or keyboard activity
    # The xscreensaver-command executable no longer exists on recent versions of ubuntu.
}

BEGIN {
  my $startup_time = seconds_since_epoch();
  sub clock {
    my $s = seconds_since_epoch();
    return sprintf "%d.%09d",($s-$startup_time),time_nanoseconds();
  }

  sub seconds_since_epoch {
    # return `date +%s`; # GNU only
    my ($s,$usec) = Time::HiRes::gettimeofday();
    return $s;
  }

  sub time_nanoseconds { # the nanoseconds part of the time since the epoch
    # return `date +%N`;
    my ($s,$usec) = Time::HiRes::gettimeofday();
    return $usec*1000;
  }
}

sub set_up_for_helper {
    my ($inputs,$input_vars) = (@_);
    my @inputs = @$inputs;
    my %input_var = %$input_vars;
    $return_info_file = POSIX::tmpnam().'_accelerando';
    $semaphore_file = POSIX::tmpnam().'_accelerando';
    open(FILE,">>$semaphore_file");
    foreach my $i(@inputs) {
      print FILE $i->{what},'=',$input_var{$i->{'what'}},"\n";
    }
    close FILE;
    open(FILE,">$cleanup_file");
    print FILE $semaphore_file,"\n";
    close FILE;
    return ($return_info_file,$semaphore_file);
}
